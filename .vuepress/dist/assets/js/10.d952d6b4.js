(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{366:function(t,e,r){"use strict";r.r(e);var s=r(44),a=Object(s.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"best-practice"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#best-practice"}},[t._v("#")]),t._v(" Best Practice")]),t._v(" "),r("h2",{attrs:{id:"blob"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#blob"}},[t._v("#")]),t._v(" Blob")]),t._v(" "),r("ol",[r("li",[t._v("create two containers for bus picture and user picture (buspicture, userpicture)")]),t._v(" "),r("li",[t._v("access tier = cool")]),t._v(" "),r("li",[t._v("picture file name = ozUser.ID , ozBus.ID")])]),t._v(" "),r("h2",{attrs:{id:"how-bus-keep-update-system"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#how-bus-keep-update-system"}},[t._v("#")]),t._v(" How bus keep update system")]),t._v(" "),r("h3",{attrs:{id:"_1-when-driver-trigger-start-button"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-when-driver-trigger-start-button"}},[t._v("#")]),t._v(" 1. When driver trigger start button")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[t._v("1.1 update ozRoute.RouteStepStatusID=RouteBusStart\n1.2 insert ozRouteHistory\n1.3 insert ozRouteStepHistory\n1.4 check if exist Radis.key (ozRoute.ID {routeID=2:*}) then delete\n1.5 create Radis.key (ozRouteID.ID { routeID=2:routeHistoryID=256 }) with Radis.value (json format with bus location timeStamp), set expire for 1hr\n")])])]),r("h3",{attrs:{id:"_2-driver-update-system-in-every-3-sec"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-driver-update-system-in-every-3-sec"}},[t._v("#")]),t._v(" 2. driver update system in every 3 sec.")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[t._v("2.1 update ozRouteHistory.LastUpdateDt , ozRouteHistory.CurrentLocation\n2.2 insert ozRouteStepHistory\n2.3 udpate Radis.value with latest location if exist Radis.key (ozRouteID.ID { routeID=2:routeHistoryID=256 }) , else insert Radis.key, set expire for 1hr\n")])])]),r("h3",{attrs:{id:"_3-passenger-trigger-bus-location-button"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-passenger-trigger-bus-location-button"}},[t._v("#")]),t._v(" 3. passenger trigger bus location button")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[t._v("3.1 query if exist Radis.key , then return bus location (in json format)\n")])])]),r("h3",{attrs:{id:"_4-driver-trigger-stop-button"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4-driver-trigger-stop-button"}},[t._v("#")]),t._v(" 4. driver trigger stop button")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[t._v("4.1 update ozRoute.RouteStepStatusID=RouteBusStop\n4.2 insert ozRouteHistory\n4.3 insert ozRouteStepHistory\n4.4 check if exist Radis.key (ozRoute.ID {routeID=2:*}) then delete\n")])])]),r("h2",{attrs:{id:"radis-key-definition"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#radis-key-definition"}},[t._v("#")]),t._v(" Radis key definition")]),t._v(" "),r("p",[r("code",[t._v("key")]),t._v(" "),r("Badge",{attrs:{text:"routeID=123:routeHistoryID=789",type:"tip",vertical:"middle"}})],1),t._v(" "),r("p",[r("code",[t._v("value")]),t._v(" "),r("Badge",{attrs:{text:"json format included timestamp, bus location,  userRoute records",type:"tip",vertical:"middle"}})],1)])}),[],!1,null,null,null);e.default=a.exports}}]);