{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{367:function(e,n,t){\"use strict\";t.r(n);var a=t(44),r=Object(a.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":e.$parent.slotKey}},[t(\"h1\",{attrs:{id:\"coding-sample\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#coding-sample\"}},[e._v(\"#\")]),e._v(\" Coding sample\")]),e._v(\" \"),t(\"h2\",{attrs:{id:\"mssql-query\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#mssql-query\"}},[e._v(\"#\")]),e._v(\" MSSQL query\")]),e._v(\" \"),t(\"div\",{staticClass:\"language-sql extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-sql\"}},[t(\"code\",[t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[e._v(\"SELECT\")]),e._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[e._v(\"TOP\")]),e._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token number\"}},[e._v(\"10\")]),e._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[e._v(\"*\")]),e._v(\" \"),t(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[e._v(\"FROM\")]),e._v(\" ozUser\\n\")])])]),t(\"h2\",{attrs:{id:\"encryption-and-decryption\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#encryption-and-decryption\"}},[e._v(\"#\")]),e._v(\" Encryption and Decryption\")]),e._v(\" \"),t(\"p\",[t(\"a\",{attrs:{href:\"https://github.com/ianyian/EncryptionSymmetricKey.git\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"sample code\"),t(\"OutboundLink\")],1)]),e._v(\" \"),t(\"div\",{staticClass:\"language-c# extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v(\"    public class AesOperation\\n    {\\n        public static string EncryptString(string key, string plainText)\\n        {\\n            byte[] iv = new byte[16];\\n            byte[] array;\\n\\n            using (Aes aes = Aes.Create())\\n            {\\n                aes.Key = Encoding.UTF8.GetBytes(key);\\n                aes.IV = iv;\\n\\n                ICryptoTransform encryptor = aes.CreateEncryptor(aes.Key, aes.IV);\\n\\n                using (MemoryStream memoryStream = new MemoryStream())\\n                {\\n                    using (CryptoStream cryptoStream = new CryptoStream((Stream)memoryStream, encryptor, CryptoStreamMode.Write))\\n                    {\\n                        using (StreamWriter streamWriter = new StreamWriter((Stream)cryptoStream))\\n                        {\\n                            streamWriter.Write(plainText);\\n                        }\\n\\n                        array = memoryStream.ToArray();\\n                    }\\n                }\\n            }\\n\\n            return Convert.ToBase64String(array);\\n        }\\n\\n        public static string DecryptString(string key, string cipherText)\\n        {\\n            byte[] iv = new byte[16];\\n            byte[] buffer = Convert.FromBase64String(cipherText);\\n\\n            using (Aes aes = Aes.Create())\\n            {\\n                aes.Key = Encoding.UTF8.GetBytes(key);\\n                aes.IV = iv;\\n                ICryptoTransform decryptor = aes.CreateDecryptor(aes.Key, aes.IV);\\n\\n                using (MemoryStream memoryStream = new MemoryStream(buffer))\\n                {\\n                    using (CryptoStream cryptoStream = new CryptoStream((Stream)memoryStream, decryptor, CryptoStreamMode.Read))\\n                    {\\n                        using (StreamReader streamReader = new StreamReader((Stream)cryptoStream))\\n                        {\\n                            return streamReader.ReadToEnd();\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\")])])]),t(\"h2\",{attrs:{id:\"restful-api-key\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#restful-api-key\"}},[e._v(\"#\")]),e._v(\" Restful API key\")]),e._v(\" \"),t(\"p\",[t(\"a\",{attrs:{href:\"https://github.com/ianyian/Restful-ApiKey-based.git\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"sample code\"),t(\"OutboundLink\")],1)]),e._v(\" \"),t(\"div\",{staticClass:\"language-c# extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v('using Microsoft.AspNetCore.Mvc;\\nusing Restful_ApiKey_based.Filters;\\nusing System;\\nusing System.Collections.Generic;\\nusing System.Linq;\\nusing System.Threading.Tasks;\\n\\nnamespace Restful_ApiKey_based.Controllers\\n{\\n    [ApiKeyAuth]\\n    public class SecretController : ControllerBase \\n    {\\n        [HttpGet(template:\"secret\")]\\n        public IActionResult GetSecret()\\n        {\\n            return Ok(\"i\\'m gooood\");\\n        }\\n    }\\n}\\n')])])]),t(\"div\",{staticClass:\"language-c# extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v('using Microsoft.AspNetCore.Mvc.Filters;\\nusing Microsoft.AspNetCore.Mvc;\\nusing System;\\nusing System.Threading.Tasks;\\nusing Microsoft.Extensions.Configuration;\\nusing Microsoft.Extensions.DependencyInjection;\\n\\nnamespace Restful_ApiKey_based.Filters\\n{\\n    [AttributeUsage(validOn: AttributeTargets.Class | AttributeTargets.Method)]\\n    public class ApiKeyAuthAttribute : Attribute, IAsyncActionFilter\\n    {\\n        private const string ApiKeyHeaderName = \"ApiKey\";\\n        public async Task OnActionExecutionAsync(ActionExecutingContext context, ActionExecutionDelegate next)\\n        {\\n            //before\\n            //context.HttpContext.Request.Query[\"ApiKey\"])\\n            if (!context.HttpContext.Request.Headers.TryGetValue(ApiKeyHeaderName, out var PotentialApiKey))\\n            {\\n                context.Result = new UnauthorizedResult();\\n                return;\\n            }\\n\\n            var configuration = context.HttpContext.RequestServices.GetRequiredService <IConfiguration>();\\n            var apikey = configuration.GetValue<String>(\"ApiKey\");\\n\\n\\n            if (!apikey.Equals(PotentialApiKey))\\n            {\\n                context.Result = new UnauthorizedResult();\\n            }\\n\\n            await next();\\n            //after\\n        }\\n    }\\n}\\n')])])]),t(\"h2\",{attrs:{id:\"blob\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#blob\"}},[e._v(\"#\")]),e._v(\" blob\")]),e._v(\" \"),t(\"p\",[t(\"a\",{attrs:{href:\"https://github.com/ianyian/AzureBlob.git\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"sample code\"),t(\"OutboundLink\")],1)]),e._v(\" \"),t(\"div\",{staticClass:\"language-c# extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v('using Azure.Storage.Blobs;\\nusing Azure.Storage.Blobs.Models;\\nusing System;\\nusing System.IO;\\nusing System.Threading.Tasks;\\n\\nnamespace BlobQuickstartV12\\n{\\n    // comment\\n    class Program\\n    {\\n        static async Task Main()\\n        {\\n            string connectionString = \"DefaultEndpointsProtocol=https;AccountName=sqlvarvrgxbaty2h4s;AccountKey=dubYuxTY/hkTHoZcZz42bKBCrkgnV9RIk9KDP1tJK5cQktML6rWzPoEehWZ3+WJIbDxlnk9nUZcYV5UFEYrH4w==;EndpointSuffix=core.windows.net\";\\n            // Create a BlobServiceClient object which will be used to create a container client\\n            BlobServiceClient blobServiceClient = new BlobServiceClient(connectionString);\\n\\n            //Create a unique name for the container\\n            string containerName = \"quickstartblobs\" + Guid.NewGuid().ToString();\\n\\n            // Create the container and return a container client object\\n            BlobContainerClient containerClient = await blobServiceClient.CreateBlobContainerAsync(containerName);\\n\\n            // Create a local file in the ./data/ directory for uploading and downloading\\n            string localPath = \"./data/\";\\n            string fileName = \"quickstart\" + Guid.NewGuid().ToString() + \".txt\";\\n            string localFilePath = Path.Combine(localPath, fileName);\\n\\n            // Write text to the file\\n            await File.WriteAllTextAsync(localFilePath, \"Hello, World!\");\\n\\n            // Get a reference to a blob\\n            BlobClient blobClient = containerClient.GetBlobClient(fileName);\\n\\n            Console.WriteLine(\"Uploading to Blob storage as blob:\\\\n\\\\t {0}\\\\n\", blobClient.Uri);\\n\\n            // Upload data from the local file\\n            await blobClient.UploadAsync(localFilePath, true);\\n\\n            Console.WriteLine(\"Listing blobs...\");\\n\\n            // List all blobs in the container\\n            await foreach (BlobItem blobItem in containerClient.GetBlobsAsync())\\n            {\\n                Console.WriteLine(\"\\\\t\" + blobItem.Name);\\n            }\\n\\n            // Download the blob to a local file\\n            // Append the string \"DOWNLOADED\" before the .txt extension \\n            // so you can compare the files in the data directory\\n            string downloadFilePath = localFilePath.Replace(\".txt\", \"DOWNLOADED.txt\");\\n\\n            Console.WriteLine(\"\\\\nDownloading blob to\\\\n\\\\t{0}\\\\n\", downloadFilePath);\\n\\n            // Download the blob\\'s contents and save it to a file\\n            await blobClient.DownloadToAsync(downloadFilePath);\\n\\n            // Clean up\\n            Console.Write(\"Press any key to begin clean up\");\\n            Console.ReadLine();\\n\\n            Console.WriteLine(\"Deleting blob container...\");\\n            await containerClient.DeleteAsync();\\n\\n            Console.WriteLine(\"Deleting the local source and downloaded files...\");\\n            File.Delete(localFilePath);\\n            File.Delete(downloadFilePath);\\n            Console.WriteLine(\"Done\");\\n        }\\n    }\\n}\\n')])])]),t(\"p\",[t(\"img\",{attrs:{src:\"/images/blob.bmp\",alt:\"azure blob\"}})]),e._v(\" \"),t(\"h2\",{attrs:{id:\"redis\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#redis\"}},[e._v(\"#\")]),e._v(\" Redis\")]),e._v(\" \"),t(\"p\",[t(\"a\",{attrs:{href:\"https://github.com/ianyian/RedisSample.git\",target:\"_blank\",rel:\"noopener noreferrer\"}},[e._v(\"sample code\"),t(\"OutboundLink\")],1)]),e._v(\" \"),t(\"div\",{staticClass:\"language-c# extra-class\"},[t(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[t(\"code\",[e._v('namespace Redistest\\n{\\n    class Program\\n    {\\n        static void Main(string[] args)\\n        {\\n            var program = new Program();\\n\\n            Console.WriteLine(\"Saving random data in cache\");\\n            program.SaveBigData();\\n\\n            Console.WriteLine(\"Reading data from cache\");\\n            program.ReadData();\\n\\n            Console.ReadLine();\\n        }\\n\\n        public void ReadData()\\n        {\\n            var cache = RedisConnectorHelper.Connection.GetDatabase();\\n            var devicesCount = 100;\\n            for (int i = 0; i < devicesCount; i++)\\n            {\\n                var value = cache.StringGet($\"Device_Status:{i}\");\\n                Console.WriteLine($\"Valor={value}\");\\n            }\\n        }\\n\\n        public void SaveBigData()\\n        {\\n            var devicesCount = 100;\\n            var rnd = new Random();\\n            var cache = RedisConnectorHelper.Connection.GetDatabase();\\n\\n            for (int i = 1; i < devicesCount; i++)\\n            {\\n                var value = rnd.Next(0, 100);\\n                cache.StringSet($\"Device_Status:{i}\", value);\\n            }\\n        }\\n    }\\n}\\n')])])])])}),[],!1,null,null,null);n.default=r.exports}}]);","extractedComments":[]}